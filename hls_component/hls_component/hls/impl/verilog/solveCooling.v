// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="solveCooling_solveCooling,hls_ip_2023_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.860000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=534,HLS_SYN_LUT=285,HLS_VERSION=2023_2_1}" *)

module solveCooling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temperature_i,
        temperature_o,
        temperature_o_ap_vld,
        mediumTemperature,
        coolingConstant,
        timeStep
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] temperature_i;
output  [31:0] temperature_o;
output   temperature_o_ap_vld;
input  [31:0] mediumTemperature;
input  [31:0] coolingConstant;
input  [31:0] timeStep;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg temperature_o_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] temperature_read_reg_149;
wire   [32:0] sub_ln5_fu_87_p2;
reg  signed [32:0] sub_ln5_reg_154;
wire    ap_CS_fsm_state2;
wire   [47:0] grp_fu_75_p2;
reg   [47:0] mul_ln5_reg_169;
wire    ap_CS_fsm_state3;
reg  signed [31:0] derivative_reg_174;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [47:0] grp_fu_71_p2;
reg   [47:0] mul_ln14_reg_189;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire  signed [31:0] sext_ln5_fu_79_p0;
wire  signed [32:0] sext_ln5_fu_79_p1;
wire  signed [32:0] sext_ln5_1_fu_83_p1;
wire   [47:0] sub_ln5_1_fu_102_p2;
wire   [47:0] shl_ln_fu_126_p3;
wire   [47:0] add_ln14_fu_133_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

solveCooling_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(derivative_reg_174),
    .din1(timeStep),
    .ce(1'b1),
    .dout(grp_fu_71_p2)
);

solveCooling_mul_33s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_33s_32s_48_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln5_reg_154),
    .din1(coolingConstant),
    .ce(1'b1),
    .dout(grp_fu_75_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        derivative_reg_174 <= {{sub_ln5_1_fu_102_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln14_reg_189 <= grp_fu_71_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln5_reg_169 <= grp_fu_75_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_ln5_reg_154 <= sub_ln5_fu_87_p2;
        temperature_read_reg_149 <= temperature_i;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temperature_o_ap_vld = 1'b1;
    end else begin
        temperature_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_133_p2 = (shl_ln_fu_126_p3 + mul_ln14_reg_189);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign sext_ln5_1_fu_83_p1 = $signed(mediumTemperature);

assign sext_ln5_fu_79_p0 = temperature_i;

assign sext_ln5_fu_79_p1 = sext_ln5_fu_79_p0;

assign shl_ln_fu_126_p3 = {{temperature_read_reg_149}, {16'd0}};

assign sub_ln5_1_fu_102_p2 = (48'd0 - mul_ln5_reg_169);

assign sub_ln5_fu_87_p2 = ($signed(sext_ln5_fu_79_p1) - $signed(sext_ln5_1_fu_83_p1));

assign temperature_o = {{add_ln14_fu_133_p2[47:16]}};

endmodule //solveCooling
